data "aws_region" "current" {}

locals {
  bucket_name = length(aws_s3_bucket.frontend) > 0 ? aws_s3_bucket.frontend[0].bucket : var.cloudfront_distribution_bucket_name

  s3_website_endpoint = length(regexall("^(us|ap|eu|sa|ca|me|af|cn|il)-", data.aws_region.current.name)) > 0 ? "${local.bucket_name}.s3-website.${data.aws_region.current.name}.amazonaws.com" : "${local.bucket_name}.s3-website-${data.aws_region.current.name}.amazonaws.com"
  cloudfront_distribution_bucket_name = "${var.cloudfront_distribution_bucket_name}-${random_string.suffix.id}"
}

resource "random_string" "suffix" {
  length  = 6
  upper   = false
  special = false
}

resource "aws_s3_bucket" "frontend" {
  count = var.cloudfront_distribution_create_bucket ? 1 : 0
  bucket        = local.cloudfront_distribution_bucket_name
  force_destroy = var.cloudfront_distribution_force_destroy
  tags = merge(var.common_tags, {
    Name        = var.cloudfront_distribution_bucket_name
    Environment = var.environment
  })
}

resource "aws_s3_bucket_public_access_block" "frontend" {
  count = var.cloudfront_distribution_create_bucket ? 1 : 0
  bucket                  = aws_s3_bucket.frontend.bucket
  block_public_acls       = true
  ignore_public_acls      = true
  block_public_policy     = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_policy" "frontend" {
  bucket = aws_s3_bucket.frontend.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid       = "AllowCloudFrontAccess",
        Effect    = "Allow",
        Principal = "*",
        Action    = "s3:GetObject",
        Resource  = "${aws_s3_bucket.frontend.arn}/*",
        Condition = {
          StringEquals = {
            "AWS:Referer" = var.cloudfront_origin_access_control_id # Or use CloudFront OAI/OAC
          }
        }
      }
    ]
  })
}

resource "aws_cloudfront_origin_access_identity" "frontend" {
  comment = "Access Identity for S3 Bucket"
}

resource "aws_s3_bucket_policy" "frontend" {
  bucket = aws_s3_bucket.frontend.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid       = "AllowCloudFrontAccess",
        Effect    = "Allow",
        Principal = {
          CanonicalUser = aws_cloudfront_origin_access_identity.frontend.cloudfront_access_identity_path
        },
        Action    = "s3:GetObject",
        Resource  = "${aws_s3_bucket.frontend.arn}/*"
      }
    ]
  })
}



resource "aws_s3_bucket_website_configuration" "frontend" {
  count = var.cloudfront_distribution_create_bucket ? 1 : 0
  bucket = aws_s3_bucket.frontend[0].id

  index_document {
    suffix = "index.html"
  }

  error_document {
    key = "error.html"
  }

  routing_rules = var.cloudfront_distribution_bucket_routing_rules
}

# Cloudfront Logs
# S3 Bucket for CloudFront Logs

resource "aws_s3_bucket" "cdn_logs" {
  bucket        = "${var.environment}-${var.cdn_logs_bucket_name}-${random_string.suffix.id}"
  force_destroy = var.cdn_logs_bucket_force_destroy

  tags = merge(var.common_tags, {
    Name        = "${var.environment}-${var.cdn_logs_bucket_name}-${random_string.suffix.id}",
    Environment = var.environment
  })
}

# resource "aws_s3_bucket_acl" "cdn_logs" {
#   bucket = aws_s3_bucket.cdn_logs.bucket
#   acl    = var.cdn_logs_s3_bucket_acl
# }

# Bucket Policy for CloudFront Logs
resource "aws_s3_bucket_policy" "cdn_logs_policy" {
  bucket = aws_s3_bucket.cdn_logs.id

  policy = jsonencode({
    Version : "2012-10-17",
    Statement : [
      {
        Sid : "AWSLogDeliveryWrite",
        Effect : "Allow",
        Principal : {
          Service : "cloudfront.amazonaws.com"
        },
        Action : "s3:PutObject",
        Resource : "${aws_s3_bucket.cdn_logs.arn}/*",
        Condition : {
          StringEquals : {
            "s3:x-amz-acl" : "bucket-owner-full-control"
          }
        }
      },
      {
        Sid : "AWSLogDeliveryAclCheck",
        Effect : "Allow",
        Principal : {
          Service : "cloudfront.amazonaws.com"
        },
        Action : "s3:GetBucketAcl",
        Resource : aws_s3_bucket.cdn_logs.arn
      }
    ]
  })
}

# Lifecycle Policy for Logs bucket
resource "aws_s3_bucket_lifecycle_configuration" "cdn_logs_lifecycle" {
  bucket = aws_s3_bucket.cdn_logs.id

  rule {
    id     = "LogRetention"
    status = "Enabled"

    expiration {
      days = var.cdn_logs_retention_days
    }
  }
}
